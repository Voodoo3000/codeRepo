node {
   def commit_id
   def build_number = env.BUILD_NUMBER
   def ec2Ip
   stage('Preparation') {
     checkout scm
     sh "git rev-parse --short HEAD > .git/commit-id"
     commit_id = readFile('.git/commit-id').trim()
   }
   stage('test') {
     def myTestContainer = docker.image('node:4.6')
     myTestContainer.pull()
     myTestContainer.inside {
       sh 'export HOME=/var/jenkins_home/workspace/test_in_docker/ && npm install --only=dev'
       sh 'export HOME=/var/jenkins_home/workspace/test_in_docker/ && npm test'
     }
   }
   stage('test with a DB') {
     def mysql = docker.image('mysql').run("-e MYSQL_ALLOW_EMPTY_PASSWORD=yes") 
     def myTestContainer = docker.image('node:4.6')
     myTestContainer.pull()
     myTestContainer.inside("--link ${mysql.id}:mysql") { // using linking, mysql will be available at host: mysql, port: 3306
       sh 'export HOME=/var/jenkins_home/workspace/test_in_docker/ && npm install --only=dev'
       sh 'export HOME=/var/jenkins_home/workspace/test_in_docker/ && npm test'
     }                                   
     mysql.stop()
   }                                     
   stage('docker build/push') {            
     docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
       def app = docker.build("voodoo3000/docker-nodejs-demo:${build_number}", '.').push()
     }                                     
   }
   stage('Build infratsructure') {
     withAWS(credentials:'jenkins_aws') {
       def outputs = cfnUpdate(stack:'MyJDAStack', url:'https://cf-templates-kwzyx2txxull-us-east-1.s3.amazonaws.com/JenkinsDockerEmbedded.yml', params:['InstanceTypeParameter': 't2.micro', 'VpcCIDR': '10.21.199.192/26', 'Subnet1CIDR': '10.21.199.192/27', 'Subnet2CIDR': '10.21.199.224/27', 'dmpKeyName': 'dmpKeyPair'])
       ec2Ip = outputs.EC2Ip
     }
   }
   stage('EC2 docker provision') {
     sh 'whoami'
     environment {DEFAULT_LOCAL_TMP = '/var/jenkins_home/'}
     ansiblePlaybook( 
        playbook: '/home/cdRepo/playbook.yml',
        inventoryContent: 'ec2Ip', 
        credentialsId: 'ec2_ssh_conn',
        disableHostKeyChecking: true,
        extraVars: [build_number_param: env.BUILD_NUMBER],
        extras: '-vvv')
   }
}                                          
